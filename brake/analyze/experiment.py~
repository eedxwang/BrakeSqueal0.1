#Driver file for the brakesqueal project

#----------------------------------Standard Library Imports---------------------------------------
import math
import numpy
import timeit
import socket
import datetime
 
#----------------------------Application Specific Imports-----------------------------------------
import brake
from brake.initialize import load, assemble, scale, diagscale
from brake.solve import projection, solver
import visual

begin_program = timeit.default_timer()

#Initializing Parameters
#################################################        

#Set Input Path
#Get the host system name to define the input path
host=socket.gethostname()
print "Working on :", host, "computer"

if host == 'laplace':
   input_path = '/homes/numerik/quraishi/work/paperprojects/brake_squeel_project/ProblemData/\
   Matrix/5kOmegaRef%(row)d/' % {'row': omegaRef}
elif host == 'aif-server':
     input_path = 'd:/eigenwerte/ProblemData/Matrix/800kOmegaRef%(row)d/' % {'row': omegaRef}
elif host == 'frenet':
     input_path = '/homes/extern/kadar/Desktop/project/python_source/data/5koref1/'
     output_path = '/homes/extern/kadar/Desktop/BrakeSqueal0.1/output/'
elif host == 'ubuntu':
     input_path = '/home/ali/Desktop/project/python_source/data/5koref1/'
     output_path = '/home/ali/Desktop/BrakeSqueal0.1/output/'
else:
     input_path = '/homes/extern/kadar/Desktop/project/python_source/data/5koref1/'
     output_path = '/homes/extern/kadar/Desktop/BrakeSqueal0.1/output/'

log_level = 0
dt = datetime.date.today()
info_log_file = output_path+'info_'+dt.strftime("%d%b")+'.log' #example info_02Aug.log
time_log_file = output_path+'time_'+dt.strftime("%d%b")+'.log' #example time_02Aug.log

## creating object
obj = brake.BrakeClass(input_path, output_path, info_log_file, time_log_file, log_level)
setattr(obj, 'data_file_list', ['BMLL','BDLL','BYLL','BDIWLL','BHLL','BKLL','BKQLL','BWLL'])
setattr(obj, 'omegaRef', 1) #Reference omega
setattr(obj, 'omega_range', numpy.linspace(17, 17, num=1)*2*math.pi)
setattr(obj, 'fRef', 1600) #Reference omega
setattr(obj, 'target', numpy.array([-10,1000,-50,12000])) #target rectangular region
setattr(obj, 'cutoff', 0.0001) 
setattr(obj, 'evs_per_shift', 30)
setattr(obj, 'desired_area_fraction', 0.99)

#--------------------------------------------------------------------------------------------------
#Begin creating the projection matrix
print "\n"+"\n"+'Beginning Setup Phase: Creating the Projection Matrices for the four different sampling sets'

setattr(obj, 'omega_basis', numpy.array([1,20])*2*math.pi)  
Q = projection.obtain_projection_matrix(obj)

print "\n","\n","\n",'Beginning POD'

sparse_list = load.load_matrices(obj)

for i in range(0,len(obj.omega_range)):
        begin_sim = timeit.default_timer()
	print "\n"
	print '---------------------------------- QEVP '+str(i+1),' --------------------------'
	omega = obj.omega_range[i]
	print 'omega = ',str(omega/(2*math.pi))
	if(obj.log_level):
          obj.logger_i.info("\n"+"\n"+'POD for omega = '+str(omega/(2*math.pi)))
	M, C, K = assemble.create_MCK(obj, sparse_list, omega)
	print 'Projecting the QEVP having dimension '+str(M.shape)
	#Projection
	QT = Q.T.conjugate()
	M =  QT.dot(M.dot(Q))
	C =  QT.dot(C.dot(Q))
	K =  QT.dot(K.dot(Q))
	print 'Onto a smaller subspace of dimension '+str(M.shape)
	
	n = M.shape[0]
	no_of_evs = n-5;
	begin_solver = timeit.default_timer()	
        la, evec = solver.qev_dense(obj,M,C,K,no_of_evs);
        end_solver = timeit.default_timer()
	res_qevp = residual.residual_qevp(M,C,K,la,evec[0:n,:])
	print 'Maximum Residual error for the QEVP is ',max(res_qevp)
	
        brake.print_target_eigs(obj,la,0)
	radius = visual.plot_eigs_cover(obj,la)
        radius = visual.plot_eigs_transition(obj,la)

	#set enable = 1 for verification
	if(obj.enable):
	  obj.logger_i.info("\n"+'The eigenvalues(in the target region) approximated using \
										POD are :'+"\n") 
	  brake.print_target_eigs(obj,la,1)
	  la, evec = brake_squeal_qevp.BrakeSquealQevp(i,path,data_file_list,omega,
								megaRef, fRef,target, evs_per_shift)
	  obj.logger_i.info("\n"+'The eigenvalues(in the target region) obtained after solving \
								the original QEVP are :'+"\n") 
	  brake.print_target_eigs(obj,la,1)
	  obj.logger_i.info("\n"+'----------------------------------------------------------'+"\n")
        
        end_sim = timeit.default_timer() 
        obj.logger_t.info('Simulation time for the '+str(i+1)+'th simulation: '+"%.2f" % \
        (end_sim-begin_sim)+' sec')
        
end_program = timeit.default_timer()

print "\n","\n","\n",'Total Run Time = : '+"%.2f" % (end_program-begin_program)+' sec'
